---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

interface Props {
  title: string;
  alignImg: "left" | "right";
  images: CollectionEntry<"glitter">[] | CollectionEntry<"screen">[];
  initialImage: CollectionEntry<"glitter"> | CollectionEntry<"screen">;
  centerVertically?: boolean;
}

const {
  title,
  images,
  initialImage,
  alignImg,
  centerVertically = true,
} = Astro.props;
---

<product-with-thumbs>
  <div
    class:list={[
      "wrapper",
      "grid",
      "gap-8",
      "lg:gap-20",
      {
        "auto-left": alignImg === "left",
        "auto-right": alignImg === "right",
        center: centerVertically,
      },
    ]}
  >
    <h2>{title}</h2>
    <Image
      class="main-image"
      id="view"
      src={initialImage.data.image}
      width={400}
      alt={initialImage.data.description}
    />
    <div class="thumbs-wrapper stack gap-2">
      <p>
        <strong>Design:</strong><span class="design-name"
          >{" " + initialImage.data.designName}</span
        >
      </p>
      <ul class:list={["thumbs"]} aria-controls="view">
        {
          images.map((image) => (
            <button
              class="thumb-button"
              aria-current={
                image.data.image.src === initialImage.data.image.src
              }
              data-src={image.data.image.src}
              data-alt={image.data.description}
              data-name={image.data.designName}
            >
              <Image
                class:list={[
                  "thumb",
                  {
                    "cover-center": image.data.coverPos === "center",
                    "cover-bottom": image.data.coverPos === "bottom",
                  },
                ]}
                src={image.data.image}
                alt={image.data.description}
                width={400}
              />
            </button>
          ))
        }
      </ul>
    </div>
    <div class="text">
      <slot />
    </div>
  </div>
</product-with-thumbs>

<script>
  class WithThumbs extends HTMLElement {
    constructor() {
      super();

      const thumbs = Array.from(this.querySelectorAll(".thumb-button"));
      const mainImage = this.querySelector(".main-image");
      const name = this.querySelector(".design-name") as HTMLSpanElement;

      thumbs.forEach((thumb) => {
        thumb.addEventListener("click", (event) => {
          try {
            const button = event.currentTarget as HTMLButtonElement;
            if (button.ariaCurrent === "true") {
              return;
            }
            if (!button.dataset.src || !button.dataset.alt || !name) {
              throw new Error("Unable to find thumbnail properties.");
            }
            mainImage?.setAttribute("src", button.dataset.src);
            mainImage?.setAttribute("alt", button.dataset.alt);
            name.innerText = ` ${button.dataset.name}`;
            const prev = thumbs.find((thumb) => thumb.ariaCurrent === "true");
            prev?.removeAttribute("aria-current");
            button.setAttribute("aria-current", "true");
          } catch (error) {
            console.error(error);
          }
        });
      });
    }
  }

  customElements.define("product-with-thumbs", WithThumbs);
</script>

<style>
  .grid {
    display: grid;
    row-gap: 16px;
    align-items: start;
    align-content: start;
  }

  .center {
    align-items: center;
  }

  h2 {
    max-width: 60ch;
    font-size: var(--text-2xl);
    text-align: center;
  }

  .main-image {
    aspect-ratio: 3/4;
    width: min(400px, 100%)
    align-self: start;
    /* justify-self: center; */
    box-shadow: var(--shadow-md);
    border-radius: 24px;
  }

  img {
    object-fit: cover;
    object-position: top;
  }

  .cover-center {
    object-position: center;
  }

  .cover-bottom {
    object-position: bottom;
  }

  .thumb {
    aspect-ratio: 1 / 1;
  }
  button {
    width: 50px;
    aspect-ratio: 1 / 1;
    border-radius: 50%;
    border: none;
    padding: 0;
    margin: 0;
    overflow: hidden;
    box-shadow: var(--shadow-md);
    outline: 3px solid transparent;
    transition: all 100ms ease-in-out;
  }

  button[aria-current] {
    outline-color: var(--text-color);
  }

  button:hover,
  button:focus-visible {
    outline-color: var(--pop-color);
  }
  .thumbs {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    max-width: var(--content-width);
    padding: 4px 0;
  }
  .thumbs-wrapper {
    margin-block-start: 8px;
    align-items: flex-start;
  }

  @media (min-width: 62rem) {
    .grid {
      padding-inline: 32px;
      grid-template-rows: auto auto 1fr;
    }
    .grid.auto-left {
      grid-template-columns: auto 1fr;
      grid-template-areas:
        "image title"
        "image text"
        "image thumbs";
    }
    .grid.auto-right {
      grid-template-columns: 1fr auto;
      grid-template-areas:
        "title image"
        "text image"
        "thumbs image";
    }
    h2 {
      grid-area: title;
      font-size: var(--text-4xl);
      align-self: start;
      margin-block-end: 8px;
      text-align: start;
    }
    .main-image {
      grid-area: image;
      border-radius: 48px;
    }
    .text {
      grid-area: text;
      align-self: start;
    }
    .thumbs-wrapper {
      grid-area: thumbs;
      align-self: start;
    }
    img {
    }

    button {
      width: 100px;
      outline: 4px solid transparent;
    }

    .thumbs {
      gap: 16px;
      padding: 8px 0;
    }
  }
</style>
